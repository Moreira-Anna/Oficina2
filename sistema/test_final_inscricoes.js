const BASE_URL = 'http://localhost:3000';

// Fun√ß√£o para fazer login e obter token
async function login(email, password) {
  try {
    const response = await fetch(`${BASE_URL}/api/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ email, password }),
    });

    if (!response.ok) {
      throw new Error(`Login failed: ${response.status}`);
    }

    const data = await response.json();
    return data.token;
  } catch (error) {
    console.error('Erro no login:', error);
    throw error;
  }
}

// Fun√ß√£o para testar inscri√ß√µes
async function testInscricoes() {
  try {
    console.log('üîÑ Iniciando testes finais de inscri√ß√µes...');

    // 1. Login como aluno
    console.log('\n1. Fazendo login como aluno...');
    const tokenAluno = await login('aluno@jogos.com', 'aluno123');
    console.log('‚úÖ Login de aluno realizado com sucesso');

    // 2. Listar eventos dispon√≠veis
    console.log('\n2. Listando eventos dispon√≠veis...');
    const eventosResponse = await fetch(`${BASE_URL}/api/eventos`, {
      headers: { Authorization: `Bearer ${tokenAluno}` },
    });
    
    if (!eventosResponse.ok) {
      throw new Error(`Erro ao listar eventos: ${eventosResponse.status}`);
    }
    
    const eventosData = await eventosResponse.json();
    const eventos = eventosData.data || [];
    console.log(`‚úÖ Encontrados ${eventos.length} eventos`);

    if (eventos.length === 0) {
      console.log('‚ùå Nenhum evento encontrado para teste');
      return;
    }

    const eventoId = eventos[0].id;
    console.log(`üìÖ Usando evento: ${eventos[0].nome}`);

    // 3. Inscrever-se no evento
    console.log('\n3. Realizando inscri√ß√£o no evento...');
    const inscricaoResponse = await fetch(`${BASE_URL}/api/inscricoes`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${tokenAluno}`,
      },
      body: JSON.stringify({ eventoId }),
    });

    if (!inscricaoResponse.ok) {
      const errorText = await inscricaoResponse.text();
      console.log(`‚ùå Erro na inscri√ß√£o: ${errorText}`);
    } else {
      const inscricaoData = await inscricaoResponse.json();
      console.log('‚úÖ Inscri√ß√£o realizada com sucesso');
      console.log(`üìã ID da inscri√ß√£o: ${inscricaoData.data?.id || 'N/A'}`);
    }

    // 4. Listar inscri√ß√µes do usu√°rio
    console.log('\n4. Listando inscri√ß√µes do usu√°rio...');
    const minhasInscricoesResponse = await fetch(`${BASE_URL}/api/inscricoes`, {
      headers: { Authorization: `Bearer ${tokenAluno}` },
    });
    const minhasInscricoesData = await minhasInscricoesResponse.json();
    const minhasInscricoes = minhasInscricoesData.data || [];
    console.log(`‚úÖ Usu√°rio tem ${minhasInscricoes.length} inscri√ß√µes`);

    // 5. Login como supervisor
    console.log('\n5. Fazendo login como supervisor...');
    const tokenSupervisor = await login('supervisor@jogos.com', 'supervisor123');
    console.log('‚úÖ Login de supervisor realizado com sucesso');

    // 6. Listar inscri√ß√µes do evento como supervisor
    console.log('\n6. Listando inscri√ß√µes do evento como supervisor...');
    const inscricoesEventoResponse = await fetch(`${BASE_URL}/api/inscricoes?eventoId=${eventoId}`, {
      headers: { Authorization: `Bearer ${tokenSupervisor}` },
    });
    const inscricoesEventoData = await inscricoesEventoResponse.json();
    const inscricoesEvento = inscricoesEventoData.data || [];
    console.log(`‚úÖ Evento tem ${inscricoesEvento.length} inscri√ß√µes`);

    // 7. Cancelar inscri√ß√£o
    if (minhasInscricoes.length > 0) {
      console.log('\n7. Cancelando inscri√ß√£o...');
      const inscricaoId = minhasInscricoes[0].id;
      const cancelResponse = await fetch(`${BASE_URL}/api/inscricoes/${inscricaoId}`, {
        method: 'DELETE',
        headers: { Authorization: `Bearer ${tokenAluno}` },
      });

      if (!cancelResponse.ok) {
        console.log(`‚ùå Erro ao cancelar inscri√ß√£o: ${cancelResponse.status}`);
      } else {
        console.log('‚úÖ Inscri√ß√£o cancelada com sucesso');
      }
    }

    // 8. Verificar se a inscri√ß√£o foi cancelada
    console.log('\n8. Verificando cancelamento...');
    const verificacaoResponse = await fetch(`${BASE_URL}/api/inscricoes`, {
      headers: { Authorization: `Bearer ${tokenAluno}` },
    });
    const verificacaoData = await verificacaoResponse.json();
    const inscricoesAtuais = verificacaoData.data || [];
    console.log(`‚úÖ Usu√°rio agora tem ${inscricoesAtuais.length} inscri√ß√µes`);

    console.log('\nüéâ Todos os testes de inscri√ß√µes passaram com sucesso!');
    console.log('\nüìã Funcionalidades testadas:');
    console.log('- ‚úÖ Login de aluno e supervisor');
    console.log('- ‚úÖ Listagem de eventos');
    console.log('- ‚úÖ Inscri√ß√£o em evento');
    console.log('- ‚úÖ Listagem de inscri√ß√µes do usu√°rio');
    console.log('- ‚úÖ Listagem de inscri√ß√µes do evento (supervisor)');
    console.log('- ‚úÖ Cancelamento de inscri√ß√£o');
    console.log('- ‚úÖ Verifica√ß√£o de cancelamento');

  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error);
  }
}

// Executar testes
testInscricoes();
